
public class SortedSinglyList implements SortedList {
    SListNode head;

    public SortedSinglyList() {
        head = null;
    }

    @Override
    public void insert(int element) {
        SListNode newNode = new SListNode();
        newNode.data = element;
        newNode.next = null;

        if (head == null) {
            head = newNode;
            return;
        }

        SListNode current = head;
        SListNode previous = null;
        while (current != null) {
            if (current.data > newNode.data) {
                break;
            }
            previous = current;
            current = current.next;
        }

        if (previous == null) {
            // Add newNode as first node.
            newNode.next = head;
            head = newNode;
            return;
        }

        // Add newNode between previous and current.
        previous.next = newNode;
        newNode.next = current;
    }

    @Override
    public void print() {
        SListNode current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println("");
    }

    // Method to delete a specific element
    @Override
    public void delete(int element) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        if (head.data == element) {
            head = head.next;
            return;
        }

        SListNode current = head;
        SListNode previous = null;

        while (current != null && current.data != element) {
            previous = current;
            current = current.next;
        }

        if (current == null) {
            System.out.println("Element not found");
            return;
        }

        // Unlink the node
        previous.next = current.next;
    }

    // Method to delete all occurrences of a specific element
    @Override
    public void deleteAll(int element) {
        while (head != null && head.data == element) {
            head = head.next;  // Remove head if it matches the element
        }

        if (head == null) return;  // If list becomes empty

        SListNode current = head;
        while (current.next != null) {
            if (current.next.data == element) {
                current.next = current.next.next;  // Skip over the node
            } else {
                current = current.next;  // Move to next node
            }
        }
    }

    // Method to search for a specific element
    @Override
    public boolean search(int element) {
        SListNode current = head;
        while (current != null) {
            if (current.data == element) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
}
